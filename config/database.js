import { oracledb } from "oracledb";
import { logger } from "../utils/logger";

let pool;

const dbConfig = {
    user: process.env.ORACLE_USER,
    password: process.env.ORACLE_PASSWORD,
    connectionString: process.env.ORACLE_CONNECTION_STRING,
    poolMin: 2,
    poolMax: 10,
    poolIncrement: 1,
    poolTimeout: 300,
    enableStats: true,
}

export async function initalizeDatabase() {
    try {
        //Create conecctions pool
        pool = await oracledb.createPool(dbConfig);
        logger.info("Database connection pool created successfully");

        //Create table if not exists
        await createTables();

        //Insert initial data
        await insertInitialData();
    } catch (error) {
        logger.error("Error initializing database", { error: error.message });
        throw error;
    }
}

async function createTables() {
    let connection;

    try {
       connection = await pool.getConnection();

       //Tabla de usuarios
       await connection.execute(`
        BEGIN
            EXECUTE INMEDIATE 'CREATE TABLE users(
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active NUMBER(1) DEFAULT 1,
                profile_data CLOB CHECK (profile_data IS JSON)
            )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
        `)

        //Tabla de sesiones pomodoro
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE pomodoro_sessions(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    session_type VARCHAR(20) DEFAULT 'work',
                    duration_minutes NUMBER NOT NULL DEFAULT 25,
                    completed NUMBER(1) DEFAULT 0,
                    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    completed_at TIMESTAMP,
                    notes CLOB,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Tabla de conversaciones del chatbot
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE chatbot_conversations(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    message CLOB NOT NULL,
                    response CLOB NOT NULL,
                    context_data CLOB CHECK (context_data IS JSON),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Tabla de registro de emociones
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE emotion_logs(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    emotion_type VARCHAR(50) NOT NULL,
                    intensity NUMBER CHECK (intensity BETWEEN 1 AND 10),
                    notes CLOB,
                    logged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    session_id NUMBER,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                    FOREIGN KEY (session_id) REFERENCES pomodoro_sessions(id) ON DELETE SET NULL
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Tabla de logros
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE achievements(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    description CLOB,
                    category VARCHAR(50),
                    points NUMBER DEFAULT 0,
                    icon VARCHAR(100),
                    requirements CLOB CHECK (requirements IS JSON),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Tabla de logros de usuarios
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE user_achievements(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    achievement_id NUMBER NOT NULL,
                    achieved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
                    FOREIGN KEY (achievement_id) REFERENCES achievements(id) ON DELETE CASCADE,
                    UNIQUE (user_id, achievement_id)
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Tabla de estad√≠sticas de usuario
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE user_stats(
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id NUMBER NOT NULL,
                    total_pomodors NUMBER DEFAULT 0,
                    total_focus_time NUMBER DEFAULT 0,
                    current_streak NUMBER DEFAULT 0,
                    longest_streak NUMBER DEFAULT 0,
                    total_points NUMBER DEFAULT 0,
                    level_number NUMBER DEFAULT 1,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF; 
            END;        
        `)

        //Crear √≠ndices
        await createIndexes(connection);
        await connection.commit();
        logger.info("Tables created successfully");
    }catch(error){
        if (connection){
            await connection.rollback();
        }
        logger.error("Error al crear tablas", error)
        throw error;
    }finally{
        if(connection){
            await connection.close();
        }
    }
}

async function createIndexes(connection) {
    const indexes = [
        "CREATE INDEX idx_pomodoro_sessions_user_id ON pomodoro_sessions(user_id)",
        "CREATE INDEX idx_pomodoro_sessions_started_at ON pomodoro_sessions(started_at)",
        "CREATE INDEX idx_chat_conversations_user_id ON chat_conversations(user_id)",
        "CREATE INDEX idx_emotion_logs_user_id ON emotion_logs(user_id)",
        "CREATE INDEX idx_emotion_logs_logged_at ON emotion_logs(logged_at)",
        "CREATE INDEX idx_user_achievements_user_id ON user_achievements(user_id)"
    ]

    for(const indexSQL of indexes) {
        try {
            await connection.execute(indexSQL);
        } catch (error) {
            // Ignore duplicate index error
            if (error.errorNum !== 955) { 
                logger.warn("Error creating index", { error: error.message});
            }
        }
    }
}

async function insertInitialData() {
    let connection;
    
    try {
        connection = await pool.getConnection();
        //Inserta logros predeterminados
        const achievements = [
            {
                name: "Primer Pomodoro",
                description: "Completa tu primer pomodoro",
                category: "inicio",
                points: 10,
                icon: "üçÖ",
                requirements: JSON.stringify({ pomodoros: 1 })
            },
            {
                name: "Racha de 5",
                description: "Completa 5 Pomodoros consecutivos",
                category: "consistencia",
                points: 50,
                icon: "üî•",
                requirements: JSON.stringify({ streak: 5 })
            },
            {
                name: "Madrugador",
                description: "Completa un Pomodoro antes de las 8 AM",
                category: "horario",
                points: 25,
                icon: "üåÖ",
                requirements: JSON.stringify({ early_bird: true })
            },
            {
                name: "Maestro del Pomodoro",
                description: "Completa 100 Pomodoros en total",
                category: "volumen",
                points: 200,
                icon: "üíØ",
                requirements: JSON.stringify({ pomodoros: 100 })
            },
            {
                name: "Enfocado",
                description: "Compelta 10 Pomodoros en un d√≠a",
                category: "enfoque",
                points: 75,
                icon: "üéØ",
                requirements: JSON.stringify({ daily_pomodoros: 10 })
            }
        ]

        for (const achievement of achievements) {
           try {
            await connection.execute(
                `INSERTO INTO achievements (name, description, category, points, icon, requirements)
                VALUES (:name, :description, :category, :points, :icon, :requirements)`,
                achievement
            )
           } catch (error) {
                // Ignore duplicate entry error
                if (error.errorNum !== 1) {
                    logger.warn(`Error insertando logro: ${error.message}`)
                }
           }
        }

        await connection.commit();
        logger.info("Initial data inserted successfully");

    } catch (error) {
        if (connection) {
            await connection.rollback();
        }
        logger.error("Error inserting initial data", { error: error.message });
    } finally {
        if (connection) {
            await connection.close();
        }
    }
}

export async function getConnection() {
    if (!pool) {
        throw new Error("Database pool not initialized");
    }
    return await pool.getConnection();
}

export async function closePool() {
    if (pool) {
        await pool.close();
        logger.info("Database connection pool closed");
    }
}

//Manejo de cierre graceful
process.on("SIGINT", async () => {
    logger.info("Closing database connection pool...");
    await closePool();
    process.exit(0);
})
