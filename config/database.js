import { oracledb } from "oracledb";
import { logger } from "../utils/logger";

let pool;

const dbConfig = {
    user: process.env.ORACLE_USER,
    password: process.env.ORACLE_PASSWORD,
    connectionString: process.env.ORACLE_CONNECTION_STRING,
    poolMin: 2,
    poolMax: 10,
    poolIncrement: 1,
    poolTimeout: 300,
    enableStats: true,
}

export async function initalizeDatabase() {
    try {
        //Create conecctions pool
        pool = await oracledb.createPool(dbConfig);
        logger.info("Database connection pool created successfully");

        //Create table if not exists
        await createTables();

        //Insert initial data
        await insertInitialData();
    } catch (error) {
        logger.error("Error initializing database", { error: error.message });
        throw error;
    }
}

async function createTables() {
    let connection;

    try {
       connection = await pool.getConnection();

       //Tabla de usuarios
       await connection.execute(`
        BEGIN
            EXECUTE INMEDIATE 'CREATE TABLE users(
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR(50) UNIQUE NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                password_hash VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active NUMBER(1) DEFAULT 1,
                profile_data CLOB CHECK (profile_data IS JSON)
            )';
            EXCEPTION
                WHEN OTHERS THEN
                    IF SQLCODE != -955 THEN
                        RAISE;
                    END IF;
            END;
        `)

        //Tabla de sesiones pomodoro
        await connection.execute(`
            BEGIN
                EXECUTE INMEDIATE 'CREATE TABLE pomodoroSessions(

                )'    
        `)
    }catch(error){

    }
}